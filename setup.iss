; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "ProjDash"
#define MyAppVersion "0.9.0"
#define MyAppPublisher "Micah Makaiwi"
#define MyAppURL "https://github.com/mmkiwi/projdash"
#define MyAppExeName "MMKiwi.ProjDash.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{3927720F-9545-4FAB-8A97-152FEFBA35DA}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={userappdata}\mmkiwi\{#MyAppName}
UninstallDisplayIcon={app}\{#MyAppExeName}
; "ArchitecturesAllowed=x64compatible" specifies that Setup cannot run
; on anything but x64 and Windows 11 on Arm.
ArchitecturesAllowed=arm64 or x64compatible or x86compatible
; "ArchitecturesInstallIn64BitMode=x64compatible" requests that the
; install be done in "64-bit mode" on x64 or Windows 11 on Arm,
; meaning it should use the native 64-bit Program Files directory and
; the 64-bit view of the registry.
ArchitecturesInstallIn64BitMode=x64compatible
DisableProgramGroupPage=yes
; Remove the following line to run in administrative install mode (install for all users).
PrivilegesRequired=lowest
OutputBaseFilename=ProjDash
OutputDir=artifacts\Installer
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "artifacts\publish\ProjDash.GUI\release_win-x64\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion; Check: InstallX64
Source: "artifacts\publish\ProjDash.GUI\release_win-x64\av_libglesv2.dll"; DestDir: "{app}"; Flags: ignoreversion; Check: InstallX64
Source: "artifacts\publish\ProjDash.GUI\release_win-x64\libHarfBuzzSharp.dll"; DestDir: "{app}"; Flags: ignoreversion; Check: InstallX64
Source: "artifacts\publish\ProjDash.GUI\release_win-x64\libSkiaSharp.dll"; DestDir: "{app}"; Flags: ignoreversion; Check: InstallX64

Source: "artifacts\publish\ProjDash.GUI\release_win-arm64\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion; Check: InstallARM64
Source: "artifacts\publish\ProjDash.GUI\release_win-arm64\av_libglesv2.dll"; DestDir: "{app}"; Flags: ignoreversion; Check: InstallARM64
Source: "artifacts\publish\ProjDash.GUI\release_win-arm64\libHarfBuzzSharp.dll"; DestDir: "{app}"; Flags: ignoreversion; Check: InstallARM64
Source: "artifacts\publish\ProjDash.GUI\release_win-arm64\libSkiaSharp.dll"; DestDir: "{app}"; Flags: ignoreversion; Check: InstallARM64

Source: "artifacts\publish\ProjDash.GUI\release_win-x86\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion; Check: InstallOtherArch
Source: "artifacts\publish\ProjDash.GUI\release_win-x86\av_libglesv2.dll"; DestDir: "{app}"; Flags: ignoreversion; Check: InstallOtherArch
Source: "artifacts\publish\ProjDash.GUI\release_win-x86\libHarfBuzzSharp.dll"; DestDir: "{app}"; Flags: ignoreversion; Check: InstallOtherArch
Source: "artifacts\publish\ProjDash.GUI\release_win-x86\libSkiaSharp.dll"; DestDir: "{app}"; Flags: ignoreversion; Check: InstallOtherArch
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent


[Code]

 procedure CurUninstallStepChanged (CurUninstallStep: TUninstallStep);
 var
     mres : integer;
 begin
    case CurUninstallStep of                   
      usPostUninstall:
        begin
          mres := MsgBox('Do you want to remove user settings?', mbConfirmation, MB_YESNO or MB_DEFBUTTON2)
          if mres = IDYES then
            DelTree(ExpandConstant('{userappdata}\mmkiwi\{#MyAppName}'), True, True, True);
       end;
   end;
end;

function InstallX64: Boolean;
begin
  Result := Is64BitInstallMode and (ProcessorArchitecture = paX64);
end;

function InstallARM64: Boolean;
begin
  Result := Is64BitInstallMode and (ProcessorArchitecture = paARM64);
end;

function InstallOtherArch: Boolean;
begin
  Result := not InstallX64 and not InstallARM64;
end;